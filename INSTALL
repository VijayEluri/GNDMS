
Alright we don't have a proper global build script yet. This means you have to do lots of things by hand, meaning this guide is not for the faint of heart. Before we get started, here is a short description of the project layout / development model.
                 


                                           
OVERVIEW
========

GNDMS consists of a set of globus web services initially created using introduce toolkit.  While introduce is a great tool for rapid prototyping, it sucks at reverse engineeering. Therefore all service skeletions are developed using introduce in a separate project (GNDMS-Templates, not included here) and changes get propagated to GNDMS locally using mercurial.  The result of this is then amended with an actual implementation in this project.  All this happens mainly in services/.

Now things get a bit more complicated. Some of the services have to access the same databases for persistence (i.e. GORFX and LOFIS) and therefore share JPA code. In order to still keep the service implementations independent of each other this code is kept in model/. Subsets of it are then compiled against each services' respective stubs to a jar for each service in model/lib.

On top of that there is commonly shared code in infra/src which gets compiled to extra/lib/gndms-infra.jar. External dependencies introduced by model and infra are kept in extra/tools-lib.

In order to stick all this together (i.e. integrate the code in model and infra with the build model of introduce) a shell script "sync.sh" is used which symlinks all jars to the right places and aggregates all existing schema files into types/ (The last point is useful for service development with introduce).



                  
BUILD INSTRUCTIONS
==================

The following description has a slight slant on IntelliJ but you should be able to repeat it with any java tool chain.
        

PREREQUISITES
-------------

- Get Globus 4.0.7
- Setup working host and user certificates (You can build without; but then again where would this get you?)
- Have it in your environment

- Get apache-derby-bin-10.4.X
- Set DERBY_HOME to it
- Add $DERBY_HOME/bin to your PATH
- Have it in your environment
             

DEPENDENCIES
------------
                                                                                  
When describing dependencies, I assume the following "project libraries"

- openjpa: extra/tools/lib/geronimo* serp* openjpa*
- gt4-current: everything in $GLOBUS_LOCATION/lib
- db-derby: extra/tools-lib/derby*
- apache-commons: extra/tools/lib/commons*
- servicename-stubs: service/ServiceName/build/stubs-ServiceName/classes
                                          

DETAILED BUILD INSTRUCTIONS
---------------------------

- Hop to each service directory and execute "ant compileStubs".  This must be redone each time the used schema is changed.                                  

- Compile infra to extra/lib/gndms-infra.jar

- Compile model/src/DSpace-model to model/lib/gndms-dspace-model.jar 
  Dependencies: db-derby, apache-commons, openjpa, dspace-stubs

- Compile model/src/LOFIS-model to model/lib/gndms-lofis-model.jar 
  Dependencies: db-derby, apache-commons, openjpa, dspace-stubs

- Compile model/src/GORFX-model *and* LOFIS-model to model/lib/gndms-gorfx-model.jar 
  Dependencies: db-derby, apache-commons, openjpa, dspace-stubs

- Execute sync.sh in the projects' top level directory.  This will create all necessary symlinks in the services' lib directories.  Without doing this, you're going to miss required jar files.

- Build the services in services/* using ant createDeploymentGar and deploy to your liking. 
  You might want to read the upcoming section on configuration before doing so, though.

- Additionally, for IDE based development, you may wish to set up projects per service. These should
  depend on all non-symlinks in service/ServiceName/lib, gt4-current, infra, servicename-stubs and the 
  services' model project and comile to service/ServiceName/build and service/ServiceName/build/test 
  respectively.

  Watch out for import order; per service stubs and model jars as well as gndms-infra.jar
  should go before service sources in IntelliJ.

  This should be enought to compile and develop in the IDE; for deployment you still need to 
  execute "ant createDeploymentGar"  
                                               

Things to check when something goes wrong: 

1) Do you need to regen the stubs? Delete service/*build/ and go from scratch
2) Stale symlinks
3) Reexecute sync.sh  
4) If you cant deploy (i.e. globus-start-container balks with one of those 40+-lines stacktraces) it's likely that you either miss some jars or that introduce created an invalid jndi-config.xml  Which can happen but is easy enough to fix: Just make sure there are neither duplicate service nor resourceHome entries.  Grid computing -- it's a weird world!
