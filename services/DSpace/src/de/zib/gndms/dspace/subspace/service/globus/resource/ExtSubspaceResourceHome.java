package de.zib.gndms.dspace.subspace.service.globus.resource;

import de.zib.gndms.dspace.common.DSpaceTools;
import de.zib.gndms.dspace.service.globus.resource.ExtDSpaceResourceHome;
import de.zib.gndms.dspace.subspace.common.SubspaceConstants;
import de.zib.gndms.dspace.subspace.stubs.types.SubspaceReference;
import de.zib.gndms.infra.GNDMSTools;
import de.zib.gndms.infra.service.GNDMServiceHome;
import de.zib.gndms.infra.system.GNDMSystem;
import de.zib.gndms.infra.wsrf.ReloadablePersistentResource;
import de.zib.gndms.model.common.GridResource;
import de.zib.gndms.model.dspace.Subspace;
import org.apache.axis.message.addressing.AttributedURI;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.globus.wsrf.Resource;
import org.globus.wsrf.ResourceException;
import org.globus.wsrf.ResourceKey;
import org.globus.wsrf.impl.SimpleResourceKey;
import org.jetbrains.annotations.NotNull;

import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.xml.namespace.QName;


/**
 * This class overrides the ResourceHome that is automatically generated by introduce for Globus
 * Toolkit. In GNDMS this is mainly necessary to provide RDBMS/JPA-based resource persistence.
 * In order to use the extended resource home they have to be configured in jndi-config.xml.
 * If this has been done properly, you should see an info-level log message during the start up
 * of the web service container that notifies succesfull initialization of the extended resource
 * home.
 *
 * @author Stefan Plantikow <plantikow@zib.de>
 * @version $Id$
 *
 *          User: stepn Date: 16.07.2008 Time: 12:35:27
 */
public final class ExtSubspaceResourceHome extends SubspaceResourceHome
	  implements GNDMServiceHome<Subspace> {

	// logger can be an instance field since resource home classes are instantiated at most once
	@NotNull
	@SuppressWarnings({"FieldNameHidesFieldInSuperclass"})
	private final Log logger = LogFactory.getLog(ExtSubspaceResourceHome.class);

	private boolean initialized;

	// System: Set during initialization
	@SuppressWarnings({"FieldAccessedSynchronizedAndUnsynchronized"})
	@NotNull
	private GNDMSystem system;

	// Serbice Address: set during initialization
	@SuppressWarnings({"FieldAccessedSynchronizedAndUnsynchronized"})
	private AttributedURI serviceAddress;

	@Override
	public synchronized void initialize() throws Exception {
		if (!initialized) {
			try {
				logger.info("Subspace home extension initializing");
				system = ExtDSpaceResourceHome.getGridConfig().retrieveSystemReference();
				serviceAddress = GNDMSTools.getServiceAddressFromContext();
				initialized = true;

				try {
					super.initialize();    // Overridden method
                    system.refreshAllResources(this);
				}
				catch (RuntimeException e) {
					initialized = false;
					logger.error(e);
					throw e;
				}
			}
			catch (NamingException e) {
				logger.error("Initialization failed");
				throw new RuntimeException(e);
			}
		}
	}

	private void ensureInitialized() {
		try
			{ initialize();	}
		catch (Exception e) {
			logger.error("Unexpected initialization error", e);
			throw new RuntimeException(e);
		}
	}

	@SuppressWarnings({ "unchecked", "RawUseOfParameterizedType" })
	@Override
	protected Resource createNewInstance() throws ResourceException {
		final Resource instance = super.createNewInstance();
		((ReloadablePersistentResource)instance).setResourceHome(this);
		return instance;
	}


    @NotNull
	public AttributedURI getServiceAddress() {
		ensureInitialized();
		return serviceAddress;
	}

	@NotNull
	public final QName getResourceKeyTypeName() {
		return getKeyTypeName();
	}

	@NotNull
	public GNDMSystem getSystem() throws IllegalStateException {
		ensureInitialized();
		return system;
	}

	public void setSystem(@NotNull GNDMSystem systemParam) throws IllegalStateException {
		throw new UnsupportedOperationException("Cant overwrite system");
	}


	@NotNull
	public EntityManagerFactory getEntityManagerFactory() {
		return getSystem().getEntityManagerFactory();
	}


    public Query getListAllQuery(final @NotNull EntityManager em) {
        return em.createNamedQuery("listAllSubspaceIds");
    }


    public void refresh(final @NotNull Subspace resourceModel) throws ResourceException {
        DSpaceTools.refreshModelResource( resourceModel, this );
    }


    @NotNull
    public String getNickName() {
        return "subspace";
    }


    @NotNull
    public Class<Subspace> getModelClass() {
        return Subspace.class;
    }

    @NotNull
    public ResourceKey getKeyForResourceModel( GridResource model ) {
        return getKeyForId( model == null ?  null : model.getId() );
    }

    @NotNull
    public ResourceKey getKeyForId( String id ) {
        return new SimpleResourceKey( SubspaceConstants.RESOURCE_KEY, id );
    }

    @NotNull
    public SubspaceReference getReferenceForSubspace( Subspace model ) throws Exception {
        return getResourceReference( getKeyForId( model ) );
    }
}
