package de.zib.gndms.dspace.subspace.service.globus.resource;

import de.zib.gndms.dspace.service.globus.resource.ExtDSpaceResourceHome;
import de.zib.gndms.infra.db.EntityManagerGuard;
import de.zib.gndms.infra.db.GNDMSystem;
import de.zib.gndms.infra.db.SystemHolder;
import de.zib.gndms.infra.wsrf.ReloadablePersistentResource;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.globus.wsrf.Resource;
import org.globus.wsrf.ResourceException;
import org.jetbrains.annotations.NotNull;

import javax.naming.NamingException;


/**
 * This class overrides the ResourceHome that is automatically generated by introduce for Globus
 * Toolkit. In GNDMS this is mainly necessary to provide RDBMS/JPA-based resource persistence.
 * In order to use the extended resource home they have to be configured in jndi-config.xml.
 * If this has been done properly, you should see an info-level log message during the start up
 * of the web service container that notifies succesfull initialization of the extended resource
 * home.
 *
 * @author Stefan Plantikow <plantikow@zib.de>
 * @version $Id$
 *
 *          User: stepn Date: 16.07.2008 Time: 12:35:27
 */
public final class ExtSubspaceResourceHome extends SubspaceResourceHome implements SystemHolder {

	// logger can be an instance field since resource home classes are instantiated at most once
	@NotNull 
	@SuppressWarnings({"FieldNameHidesFieldInSuperclass"})
	private final Log logger = LogFactory.getLog(ExtSubspaceResourceHome.class);

	private SystemHolder holder;

	private boolean initialized;

	@Override
	public synchronized void initialize() throws Exception {
		if (!initialized) {
			try {
				logger.info("Subspace home extension initializing");
				holder = ExtDSpaceResourceHome.getGridConfig().retrieveSystemReference();
				initialized = true;

				try {
					super.initialize();    // Overridden method
				}
				catch (RuntimeException e) {
					initialized = false;
					logger.error(e);
					throw e;
				}
			}
			catch (NamingException e) {
				logger.error("Initialization failed");
				throw new RuntimeException(e);
			}
		}
	}

	@SuppressWarnings({ "unchecked" })
	@Override
	protected Resource createNewInstance() throws ResourceException {
		final Resource instance = super.createNewInstance();
		((ReloadablePersistentResource)instance).setResourceHome(this);
		return instance;
	}

	@NotNull
	public GNDMSystem getSystem() throws IllegalStateException {
		return holder.getSystem();
	}

	public void setSystem(@NotNull GNDMSystem system) throws IllegalStateException {
		holder.setSystem(system);
	}


	@NotNull
	public EntityManagerGuard currentEMG() {
		return holder.currentEMG();
	}
}
