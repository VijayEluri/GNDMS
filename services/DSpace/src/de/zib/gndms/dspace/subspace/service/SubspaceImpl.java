package de.zib.gndms.dspace.subspace.service;

import de.zib.gndms.dspace.slice.stubs.types.SliceReference;
import de.zib.gndms.dspace.slice.service.globus.resource.SliceResourceHome;
import de.zib.gndms.dspace.slice.service.globus.resource.SliceResource;
import de.zib.gndms.dspace.subspace.stubs.types.OutOfSpace;
import de.zib.gndms.dspace.subspace.stubs.types.UnknownOrInvalidSliceKind;
import de.zib.gndms.dspace.subspace.service.globus.resource.SubspaceResource;
import de.zib.gndms.dspace.stubs.types.InternalFailure;
import de.zib.gndms.model.dspace.Subspace;
import de.zib.gndms.model.dspace.Slice;
import de.zib.gndms.model.dspace.StorageSize;
import de.zib.gndms.infra.system.GNDMSystem;

import java.rmi.RemoteException;
import java.util.Calendar;

import types.ContextT;
import types.SliceCreationSpecifier;
import types.StorageSizeT;
import org.globus.wsrf.ResourceKey;
import org.globus.wsrf.ResourceContext;
import org.globus.wsrf.NoSuchResourceException;
import org.globus.wsrf.ResourceContextException;

/** 
 * TODO:I am the service side implementation class.  IMPLEMENT AND DOCUMENT ME
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class SubspaceImpl extends SubspaceImplBase {

	
	public SubspaceImpl() throws RemoteException {
		super();
	}

    public SliceReference createSlice( SliceCreationSpecifier sliceCreationSpecifier, ContextT context ) throws RemoteException, OutOfSpace, UnknownOrInvalidSliceKind, InternalFailure {

        SubspaceResource subref = getResource();

        Subspace sp = subref.loadModelById( subref.getID() );

        if( sp == null )
           throw new RemoteException( "No subspace found" );


        SliceReference sref;
        try {
            SliceResourceHome srh = getSliceResourceHome( );
            ResourceKey rk = srh.createResource( );
            SliceResource sr = srh.getResource( rk );

            GNDMSystem system = subref.getResourceHome( ).getSystem( );
            // todo maybe let gndmsys implement ModelUUIdgen ??
            //      or use different class
            Slice sl = sp.createSlice( system, sliceCreationSpecifier.getSliceKind() );
            // todo where to get system id form?
            sl.setSystemId( "blah" );
            sl.setId( sr.getID( ).toString( ) );

            Calendar cal = sliceCreationSpecifier.getTerminationTime();
            if( cal != null )
                sl.setTerminationTime( cal );

            StorageSizeT sst = sliceCreationSpecifier.getTotalStorageSize( );
            if( sst != null ) {
                StorageSize ssize = new StorageSize();
                // todo incompatible type
                ssize.setAmount( (long) sst.getStorageSizeValue() );
                ssize.setUnit( sst.getStorageSizeUnit() );
                if( sp.getAvailableSize().getAmountInBytes() < ssize.getAmountInBytes() )
                    throw new OutOfSpace( );
                // todo update avail storage size
            }
            sr.setModel( sl );

            sref = srh.getResourceReference( rk );
        } catch ( OutOfSpace e ) {
            throw e;
        } catch ( Exception e ) {
            throw new RemoteException( e.toString() );
        }

        return sref;
    }
    

  public javax.xml.namespace.QName[] listCreatableSliceKinds() throws RemoteException {
    //TODO: Implement this autogenerated method
    throw new RemoteException("Not yet implemented");
  }

    /**
     * Method find the resource associated with the caller
     *
     * ( this mehtod is "borrowed" from the Globus4 book.
     *
     * @return The resource or null if there is none.
     * @throws RemoteException
     */
    private SubspaceResource getResource() throws RemoteException {

        Object resource = null;

        try {
			resource = ResourceContext.getResourceContext().getResource();
		} catch (NoSuchResourceException e) {
			throw new RemoteException("Specified resource does not exist", e);
		} catch (ResourceContextException e) {
			throw new RemoteException("Error during resource lookup", e);
		} catch (Exception e) {
			throw new RemoteException("", e);
		}

		SubspaceResource res = (SubspaceResource) resource;
		return res;
	}




}

