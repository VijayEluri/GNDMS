package de.zib.gndms.dspace.subspace.client;

/*
 * Copyright 2008-2011 Zuse Institute Berlin (ZIB)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.Calendar;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.types.URI;
import org.apache.axis.types.UnsignedLong;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.encoding.ObjectDeserializer;
import org.globus.wsrf.encoding.DeserializationException;

import de.zib.gndms.dspace.subspace.stubs.SubspacePortType;
import de.zib.gndms.dspace.subspace.stubs.types.OutOfSpace;
import de.zib.gndms.dspace.subspace.stubs.types.UnknownOrInvalidSliceKind;
import de.zib.gndms.dspace.subspace.stubs.service.SubspaceServiceAddressingLocator;
import de.zib.gndms.dspace.subspace.common.SubspaceI;
import de.zib.gndms.dspace.subspace.common.SubspaceConstants;
import de.zib.gndms.dspace.slice.client.SliceClient;
import de.zib.gndms.dspace.slice.stubs.types.SliceReference;
import de.zib.gndms.dspace.common.DSpaceTools;
import de.zib.gndms.dspace.client.DSpaceClient;
import de.zib.gndms.dspace.stubs.types.DSpaceReference;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import types.SliceCreationSpecifier;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class SubspaceClient extends SubspaceClientBase implements SubspaceI {	

	public SubspaceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public SubspaceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public SubspaceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public SubspaceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

    public SliceClient createSlice ( String sliceKindURI, Calendar terminationTime,
                                              long totalStorageSize ) throws URI.MalformedURIException, RemoteException, OutOfSpace {

        SliceCreationSpecifier scs = new SliceCreationSpecifier( );
        scs.setSliceKind( new URI( sliceKindURI ) );
        scs.setTerminationTime( terminationTime );
        scs.setTotalStorageSize( DSpaceTools.unsignedLongFromLong( totalStorageSize ) );

        return createSlice ( scs );
    }


    public SliceClient createSlice ( SliceCreationSpecifier specifier ) throws RemoteException, UnknownOrInvalidSliceKind, OutOfSpace, URI.MalformedURIException {

        SliceReference sr = createSlice( specifier, null );

        return new SliceClient( sr.getEndpointReference() );
    }


    public long getAvailableStorageSize( ) throws DeserializationException, RemoteException {

        return getStorageSizeX( SubspaceConstants.AVAILABLESTORAGESIZE );
    }
    

    public long getTotalStorageSize( ) throws DeserializationException, RemoteException {

        return getStorageSizeX( SubspaceConstants.TOTALSTORAGESIZE );
    }

    
    private long getStorageSizeX( QName sizeKind ) throws RemoteException, DeserializationException {
        GetResourcePropertyResponse resp = getResourceProperty( sizeKind );
        return ( ( UnsignedLong ) ObjectDeserializer.toObject( resp.get_any()[0], UnsignedLong.class) ).longValue( );
    }


    public DSpaceClient getDSpace( ) throws RemoteException, DeserializationException, MalformedURIException {
        GetResourcePropertyResponse resp = getResourceProperty( SubspaceConstants.DSPACEREFERENCE );
        DSpaceReference srf = (DSpaceReference) ObjectDeserializer.toObject( resp.get_any()[0], DSpaceReference.class );
        return new DSpaceClient( srf.getEndpointReference() );
    }

    public QName getSubspaceSpecifier( ) throws RemoteException, DeserializationException {

        GetResourcePropertyResponse resp = getResourceProperty( SubspaceConstants.SUBSPACESPECIFIER );
        return (QName) ObjectDeserializer.toObject( resp.get_any()[0], QName.class );
    }


    
    public static void usage(){
		System.out.println(SubspaceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  SubspaceClient client = new SubspaceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public de.zib.gndms.dspace.slice.stubs.types.SliceReference createSlice(types.SliceCreationSpecifier sliceCreationSpecifier,types.ContextT context) throws RemoteException, de.zib.gndms.dspace.subspace.stubs.types.OutOfSpace, de.zib.gndms.dspace.subspace.stubs.types.UnknownOrInvalidSliceKind, de.zib.gndms.dspace.stubs.types.InternalFailure {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createSlice");
    de.zib.gndms.dspace.subspace.stubs.CreateSliceRequest params = new de.zib.gndms.dspace.subspace.stubs.CreateSliceRequest();
    de.zib.gndms.dspace.subspace.stubs.CreateSliceRequestSliceCreationSpecifier sliceCreationSpecifierContainer = new de.zib.gndms.dspace.subspace.stubs.CreateSliceRequestSliceCreationSpecifier();
    sliceCreationSpecifierContainer.setSliceCreationSpecifier(sliceCreationSpecifier);
    params.setSliceCreationSpecifier(sliceCreationSpecifierContainer);
    de.zib.gndms.dspace.subspace.stubs.CreateSliceRequestContext contextContainer = new de.zib.gndms.dspace.subspace.stubs.CreateSliceRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.dspace.subspace.stubs.CreateSliceResponse boxedResult = portType.createSlice(params);
    return boxedResult.getSliceReference();
    }
  }

  public org.apache.axis.types.URI[] listCreatableSliceKinds() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"listCreatableSliceKinds");
    de.zib.gndms.dspace.subspace.stubs.ListCreatableSliceKindsRequest params = new de.zib.gndms.dspace.subspace.stubs.ListCreatableSliceKindsRequest();
    de.zib.gndms.dspace.subspace.stubs.ListCreatableSliceKindsResponse boxedResult = portType.listCreatableSliceKinds(params);
    return boxedResult.getSliceKind();
    }
  }

}
