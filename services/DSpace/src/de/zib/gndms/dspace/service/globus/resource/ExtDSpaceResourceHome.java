package de.zib.gndms.dspace.service.globus.resource;

import de.zib.gndms.dspace.service.DSpaceConfiguration;
import de.zib.gndms.infra.GridConfig;
import de.zib.gndms.infra.db.*;
import org.apache.axis.message.addressing.Address;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.globus.wsrf.ResourceContext;
import org.jetbrains.annotations.NotNull;

import javax.naming.NamingException;
import javax.xml.namespace.QName;

/**
 * This class overrides the ResourceHome that is automatically generated by introduce for Globus
 * Toolkit. In GNDMS this is mainly necessary to provide RDBMS/JPA-based resource persistence.
 * In order to use the extended resource home they have to be configured in jndi-config.xml.
 * If this has been done properly, you should see an info-level log message during the start up
 * of the web service container that notifies succesfull initialization of the extended resource
 * home.
 *
 * @author Stefan Plantikow <plantikow@zib.de>
 * @version $Id$
 *
 *          User: stepn Date: 16.07.2008 Time: 12:35:27
 */
public final class ExtDSpaceResourceHome  extends DSpaceResourceHome
	  implements SystemHolder, ServiceInfo {

	// logger can be an instance field since resource home classes are instantiated at most once
	@NotNull
	@SuppressWarnings({"FieldNameHidesFieldInSuperclass"})
	private final Log logger = LogFactory.getLog(ExtDSpaceResourceHome.class);

	@SuppressWarnings({"StaticVariableOfConcreteClass"})
	private static final GridConfig SHARED_CONFIG = new GridConfig() {
		@Override
		@NotNull
		public String getGridJNDIEnvName() throws Exception {
				return DSpaceConfiguration.getConfiguration().getGridJNDIEnv();
		}

		@Override
		@NotNull
		public String getGridName() throws Exception {
				return DSpaceConfiguration.getConfiguration().getGridName();
		}

		@Override
		@NotNull
		public String getGridPath() throws Exception {
				return DSpaceConfiguration.getConfiguration().getGridPath();
		}

	};

	public static GridConfig getGridConfig() {
		return SHARED_CONFIG;
	}

	@NotNull
	private SystemHolder holder = new DefaultSystemHolder();

	private Address serviceAddress;

	@Override
	public void initialize() throws Exception {
		super.initialize();    // Overridden method
		logger.info("Extension class initializing");
		try {
			holder.setSystem(getGridConfig().retrieveSystemReference());
		}
		catch (NamingException e) {
			logger.error("Initialization failed");
			throw new RuntimeException(e);
		}

		serviceAddress = new Address(ResourceContext.getResourceContext().getServiceURL().toString());
	}

	@NotNull
	public GNDMSystem getSystem() throws IllegalStateException {return holder.getSystem();}

	public void setSystem(@NotNull GNDMSystem system) throws IllegalStateException {
		holder.setSystem(system);
	}

	@NotNull
	public final Address getServiceAddress() {
		return serviceAddress;
	}

	@NotNull
	public final QName getResourceKeyTypeName() {
		return getKeyTypeName();
	}
}
