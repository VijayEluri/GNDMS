package de.zib.gndms.lofis.lofiset.common;

import java.rmi.RemoteException;

/** 
 * This class is autogenerated, DO NOT EDIT.
 * 
 * This interface represents the API which is accessable on the grid service from the client. 
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public interface LofiSetI {

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException ;

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException ;

  public org.oasis.wsn.SubscribeResponse subscribe(org.oasis.wsn.Subscribe params) throws RemoteException ;

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException ;

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException ;

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException ;

  /**
   * Provides (empty) slices for the storage of replicas to this LofiSet
   *
   * @param slices
   * @throws UnsupportedOrInvalidSlice
   *	
   */
  public void grantStorageSlices(types.SliceReference[] slices) throws RemoteException, de.zib.gndms.lofis.stubs.types.UnsupportedOrInvalidSlice ;

  /**
   * Create new LofiSet containing a mapped subset of this lofi's content.
   *
   * @param lofiMap
   * @throws MissingSourceFiles
   *	
   */
  public de.zib.gndms.lofis.lofiset.client.LofiSetClient getSubLofiSet(types.FileMappingSeqT lofiMap) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, de.zib.gndms.lofis.stubs.types.MissingSourceFiles ;

  /**
   * Add Slices to LofiSet
   *
   * @param existingReplicaSlices
   * @throws MissingSourceFiles
   *	
   * @throws UnsupportedOrInvalidSlice
   *	
   */
  public void registerReplicaSlices(types.ReplicaSlicesT existingReplicaSlices) throws RemoteException, de.zib.gndms.lofis.stubs.types.MissingSourceFiles, de.zib.gndms.lofis.stubs.types.UnsupportedOrInvalidSlice ;

  /**
   * Return replica slices matching all of the provided filters
   *
   * @param replicaSliceFilter
   */
  public types.ReplicaSlicesT[] getReplicaSlices(types.ReplicaSliceFilterT[] replicaSliceFilter) throws RemoteException ;

}

