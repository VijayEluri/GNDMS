package de.zib.gndms.lofis.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import de.zib.gndms.lofis.stubs.LOFISPortType;
import de.zib.gndms.lofis.stubs.service.LOFISServiceAddressingLocator;
import de.zib.gndms.lofis.common.LOFISI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class LOFISClient extends LOFISClientBase implements LOFISI {	

	public LOFISClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public LOFISClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public LOFISClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public LOFISClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(LOFISClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  LOFISClient client = new LOFISClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public de.zib.gndms.lofis.lofiset.stubs.types.LofiSetReference registerSlice(types.ConflictResolvingFileMappingSeqT lofiMap,types.SliceReference sliceReference,boolean registerEverything) throws RemoteException, de.zib.gndms.lofis.stubs.types.ConflictingDestinationsInMap, de.zib.gndms.lofis.stubs.types.MissingSourceFiles, de.zib.gndms.lofis.stubs.types.ConflictResolutionFailed, de.zib.gndms.lofis.stubs.types.UnsupportedOrInvalidSlice {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"registerSlice");
    de.zib.gndms.lofis.stubs.RegisterSliceRequest params = new de.zib.gndms.lofis.stubs.RegisterSliceRequest();
    de.zib.gndms.lofis.stubs.RegisterSliceRequestLofiMap lofiMapContainer = new de.zib.gndms.lofis.stubs.RegisterSliceRequestLofiMap();
    lofiMapContainer.setLofiMap(lofiMap);
    params.setLofiMap(lofiMapContainer);
    de.zib.gndms.lofis.stubs.RegisterSliceRequestSliceReference sliceReferenceContainer = new de.zib.gndms.lofis.stubs.RegisterSliceRequestSliceReference();
    sliceReferenceContainer.setSliceReference(sliceReference);
    params.setSliceReference(sliceReferenceContainer);
    params.setRegisterEverything(registerEverything);
    de.zib.gndms.lofis.stubs.RegisterSliceResponse boxedResult = portType.registerSlice(params);
    return boxedResult.getLofiSetReference();
    }
  }

  public de.zib.gndms.lofis.lofiset.client.LofiSetClient mergeLofiSets(de.zib.gndms.lofis.lofiset.stubs.types.LofiSetReference[] lofiSetReference) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, de.zib.gndms.lofis.stubs.types.ConflictingLofiSetsInMerge {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"mergeLofiSets");
    de.zib.gndms.lofis.stubs.MergeLofiSetsRequest params = new de.zib.gndms.lofis.stubs.MergeLofiSetsRequest();
    de.zib.gndms.lofis.stubs.MergeLofiSetsRequestLofiSetReference lofiSetReferenceContainer = new de.zib.gndms.lofis.stubs.MergeLofiSetsRequestLofiSetReference();
    lofiSetReferenceContainer.setLofiSetReference(lofiSetReference);
    params.setLofiSetReference(lofiSetReferenceContainer);
    de.zib.gndms.lofis.stubs.MergeLofiSetsResponse boxedResult = portType.mergeLofiSets(params);
    EndpointReferenceType ref = boxedResult.getLofiSetReference().getEndpointReference();
    return new de.zib.gndms.lofis.lofiset.client.LofiSetClient(ref);
    }
  }

}
