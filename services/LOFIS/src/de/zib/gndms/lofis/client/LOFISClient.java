package de.zib.gndms.lofis.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import de.zib.gndms.lofis.stubs.LOFISPortType;
import de.zib.gndms.lofis.stubs.service.LOFISServiceAddressingLocator;
import de.zib.gndms.lofis.common.LOFISI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class LOFISClient extends LOFISClientBase implements LOFISI {	

	public LOFISClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public LOFISClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public LOFISClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public LOFISClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(LOFISClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  LOFISClient client = new LOFISClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public de.zib.gndms.lofis.lofiset.stubs.types.LofiSetReference createLofiSet(types.ReplicaSlicesT existingReplicaSlices,types.SliceReference[] storageSlices,types.ContextT context) throws RemoteException, de.zib.gndms.lofis.stubs.types.MissingSourceFiles, de.zib.gndms.lofis.stubs.types.UnsupportedOrInvalidSlice {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createLofiSet");
    de.zib.gndms.lofis.stubs.CreateLofiSetRequest params = new de.zib.gndms.lofis.stubs.CreateLofiSetRequest();
    de.zib.gndms.lofis.stubs.CreateLofiSetRequestExistingReplicaSlices existingReplicaSlicesContainer = new de.zib.gndms.lofis.stubs.CreateLofiSetRequestExistingReplicaSlices();
    existingReplicaSlicesContainer.setReplicaSlices(existingReplicaSlices);
    params.setExistingReplicaSlices(existingReplicaSlicesContainer);
    de.zib.gndms.lofis.stubs.CreateLofiSetRequestStorageSlices storageSlicesContainer = new de.zib.gndms.lofis.stubs.CreateLofiSetRequestStorageSlices();
    storageSlicesContainer.setSliceReference(storageSlices);
    params.setStorageSlices(storageSlicesContainer);
    de.zib.gndms.lofis.stubs.CreateLofiSetRequestContext contextContainer = new de.zib.gndms.lofis.stubs.CreateLofiSetRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.lofis.stubs.CreateLofiSetResponse boxedResult = portType.createLofiSet(params);
    return boxedResult.getLofiSetReference();
    }
  }

  public de.zib.gndms.lofis.lofiset.client.LofiSetClient mergeLofiSets(de.zib.gndms.lofis.lofiset.stubs.types.LofiSetReference[] lofiSetRefs,types.ContextT context) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, de.zib.gndms.lofis.stubs.types.ConflictingLofiSetsInMerge {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"mergeLofiSets");
    de.zib.gndms.lofis.stubs.MergeLofiSetsRequest params = new de.zib.gndms.lofis.stubs.MergeLofiSetsRequest();
    de.zib.gndms.lofis.stubs.MergeLofiSetsRequestLofiSetRefs lofiSetRefsContainer = new de.zib.gndms.lofis.stubs.MergeLofiSetsRequestLofiSetRefs();
    lofiSetRefsContainer.setLofiSetReference(lofiSetRefs);
    params.setLofiSetRefs(lofiSetRefsContainer);
    de.zib.gndms.lofis.stubs.MergeLofiSetsRequestContext contextContainer = new de.zib.gndms.lofis.stubs.MergeLofiSetsRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.lofis.stubs.MergeLofiSetsResponse boxedResult = portType.mergeLofiSets(params);
    EndpointReferenceType ref = boxedResult.getLofiSetReference().getEndpointReference();
    return new de.zib.gndms.lofis.lofiset.client.LofiSetClient(ref);
    }
  }

  public java.lang.Object callMaintenanceAction(java.lang.String action,types.ContextT options) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"callMaintenanceAction");
    de.zib.gndms.lofis.stubs.CallMaintenanceActionRequest params = new de.zib.gndms.lofis.stubs.CallMaintenanceActionRequest();
    params.setAction(action);
    de.zib.gndms.lofis.stubs.CallMaintenanceActionRequestOptions optionsContainer = new de.zib.gndms.lofis.stubs.CallMaintenanceActionRequestOptions();
    optionsContainer.setContext(options);
    params.setOptions(optionsContainer);
    de.zib.gndms.lofis.stubs.CallMaintenanceActionResponse boxedResult = portType.callMaintenanceAction(params);
    return boxedResult.getResponse();
    }
  }

  public de.zib.gndms.lofis.lofiset.client.LofiSetClient createOrRetrieveLofiSet(java.lang.Object cacheKey,types.ReplicaSlicesT existingReplicaSlices,types.SliceReference[] storageSlices,types.ContextT context) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, de.zib.gndms.lofis.stubs.types.UnknownOrInvalidCacheKey, de.zib.gndms.lofis.stubs.types.MissingSourceFiles, de.zib.gndms.lofis.stubs.types.UnsupportedOrInvalidSlice {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createOrRetrieveLofiSet");
    de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequest params = new de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequest();
    params.setCacheKey(cacheKey);
    de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequestExistingReplicaSlices existingReplicaSlicesContainer = new de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequestExistingReplicaSlices();
    existingReplicaSlicesContainer.setReplicaSlices(existingReplicaSlices);
    params.setExistingReplicaSlices(existingReplicaSlicesContainer);
    de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequestStorageSlices storageSlicesContainer = new de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequestStorageSlices();
    storageSlicesContainer.setSliceReference(storageSlices);
    params.setStorageSlices(storageSlicesContainer);
    de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequestContext contextContainer = new de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.lofis.stubs.CreateOrRetrieveLofiSetResponse boxedResult = portType.createOrRetrieveLofiSet(params);
    EndpointReferenceType ref = boxedResult.getLofiSetReference().getEndpointReference();
    return new de.zib.gndms.lofis.lofiset.client.LofiSetClient(ref);
    }
  }

  public de.zib.gndms.lofis.lofiset.client.LofiSetClient retrieveLofiSet(java.lang.Object cacheKey,types.ContextT context) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, de.zib.gndms.lofis.stubs.types.UnknownOrInvalidCacheKey {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"retrieveLofiSet");
    de.zib.gndms.lofis.stubs.RetrieveLofiSetRequest params = new de.zib.gndms.lofis.stubs.RetrieveLofiSetRequest();
    params.setCacheKey(cacheKey);
    de.zib.gndms.lofis.stubs.RetrieveLofiSetRequestContext contextContainer = new de.zib.gndms.lofis.stubs.RetrieveLofiSetRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.lofis.stubs.RetrieveLofiSetResponse boxedResult = portType.retrieveLofiSet(params);
    EndpointReferenceType ref = boxedResult.getLofiSetReference().getEndpointReference();
    return new de.zib.gndms.lofis.lofiset.client.LofiSetClient(ref);
    }
  }

  public de.zib.gndms.lofis.lofiset.client.LofiSetClient mergeLofiSetsAndCacheNew(java.lang.Object cacheKey,de.zib.gndms.lofis.lofiset.stubs.types.LofiSetReference[] lofiSetRefs,types.ContextT context) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, de.zib.gndms.lofis.stubs.types.UnknownOrInvalidCacheKey, de.zib.gndms.lofis.stubs.types.ConflictingLofiSetsInMerge {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"mergeLofiSetsAndCacheNew");
    de.zib.gndms.lofis.stubs.MergeLofiSetsAndCacheNewRequest params = new de.zib.gndms.lofis.stubs.MergeLofiSetsAndCacheNewRequest();
    params.setCacheKey(cacheKey);
    de.zib.gndms.lofis.stubs.MergeLofiSetsAndCacheNewRequestLofiSetRefs lofiSetRefsContainer = new de.zib.gndms.lofis.stubs.MergeLofiSetsAndCacheNewRequestLofiSetRefs();
    lofiSetRefsContainer.setLofiSetReference(lofiSetRefs);
    params.setLofiSetRefs(lofiSetRefsContainer);
    de.zib.gndms.lofis.stubs.MergeLofiSetsAndCacheNewRequestContext contextContainer = new de.zib.gndms.lofis.stubs.MergeLofiSetsAndCacheNewRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.lofis.stubs.MergeLofiSetsAndCacheNewResponse boxedResult = portType.mergeLofiSetsAndCacheNew(params);
    EndpointReferenceType ref = boxedResult.getLofiSetReference().getEndpointReference();
    return new de.zib.gndms.lofis.lofiset.client.LofiSetClient(ref);
    }
  }

}
