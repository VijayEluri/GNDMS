package de.zib.gndms.GORFX.ORQ.client;

/*
 * Copyright 2008-2010 Zuse Institut Berlin (ZIB)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import de.zib.gndms.GORFX.ORQ.common.ORQI;
import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

import java.rmi.RemoteException;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class ORQClient extends ORQClientBase implements ORQI {	

	public ORQClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public ORQClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public ORQClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public ORQClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(ORQClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  ORQClient client = new ORQClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"destroy");
    return portType.destroy(params);
    }
  }

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setTerminationTime");
    return portType.setTerminationTime(params);
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.apache.axis.message.addressing.EndpointReferenceType getOfferAndDestroyRequest(types.OfferExecutionContractT offerExecutionContract,types.ContextT context) throws RemoteException, de.zib.gndms.GORFX.ORQ.stubs.types.UnfullfillableRequest, de.zib.gndms.GORFX.ORQ.stubs.types.PermissionDenied {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getOfferAndDestroyRequest");
    de.zib.gndms.GORFX.ORQ.stubs.GetOfferAndDestroyRequestRequest params = new de.zib.gndms.GORFX.ORQ.stubs.GetOfferAndDestroyRequestRequest();
    de.zib.gndms.GORFX.ORQ.stubs.GetOfferAndDestroyRequestRequestOfferExecutionContract offerExecutionContractContainer = new de.zib.gndms.GORFX.ORQ.stubs.GetOfferAndDestroyRequestRequestOfferExecutionContract();
    offerExecutionContractContainer.setOfferExecutionContract(offerExecutionContract);
    params.setOfferExecutionContract(offerExecutionContractContainer);
    de.zib.gndms.GORFX.ORQ.stubs.GetOfferAndDestroyRequestRequestContext contextContainer = new de.zib.gndms.GORFX.ORQ.stubs.GetOfferAndDestroyRequestRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.GORFX.ORQ.stubs.GetOfferAndDestroyRequestResponse boxedResult = portType.getOfferAndDestroyRequest(params);
    return boxedResult.getEndpointReference();
    }
  }

  public types.OfferExecutionContractT permitEstimateAndDestroyRequest(types.OfferExecutionContractT offerExecutionContract,types.ContextT context) throws RemoteException, de.zib.gndms.GORFX.ORQ.stubs.types.UnfullfillableRequest, de.zib.gndms.GORFX.ORQ.stubs.types.PermissionDenied {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"permitEstimateAndDestroyRequest");
    de.zib.gndms.GORFX.ORQ.stubs.PermitEstimateAndDestroyRequestRequest params = new de.zib.gndms.GORFX.ORQ.stubs.PermitEstimateAndDestroyRequestRequest();
    de.zib.gndms.GORFX.ORQ.stubs.PermitEstimateAndDestroyRequestRequestOfferExecutionContract offerExecutionContractContainer = new de.zib.gndms.GORFX.ORQ.stubs.PermitEstimateAndDestroyRequestRequestOfferExecutionContract();
    offerExecutionContractContainer.setOfferExecutionContract(offerExecutionContract);
    params.setOfferExecutionContract(offerExecutionContractContainer);
    de.zib.gndms.GORFX.ORQ.stubs.PermitEstimateAndDestroyRequestRequestContext contextContainer = new de.zib.gndms.GORFX.ORQ.stubs.PermitEstimateAndDestroyRequestRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.GORFX.ORQ.stubs.PermitEstimateAndDestroyRequestResponse boxedResult = portType.permitEstimateAndDestroyRequest(params);
    return boxedResult.getOfferExecutionContract();
    }
  }

}
