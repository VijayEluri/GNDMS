package de.zib.gndms.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import de.zib.gndms.stubs.WHORFXPortType;
import de.zib.gndms.stubs.service.WHORFXServiceAddressingLocator;
import de.zib.gndms.common.WHORFXI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class WHORFXClient extends WHORFXClientBase implements WHORFXI {	

	public WHORFXClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WHORFXClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public WHORFXClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public WHORFXClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(WHORFXClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  WHORFXClient client = new WHORFXClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public java.lang.Object callMaintenanceAction(java.lang.String action,types.ContextT options) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"callMaintenanceAction");
    de.zib.gndms.stubs.CallMaintenanceActionRequest params = new de.zib.gndms.stubs.CallMaintenanceActionRequest();
    params.setAction(action);
    de.zib.gndms.stubs.CallMaintenanceActionRequestOptions optionsContainer = new de.zib.gndms.stubs.CallMaintenanceActionRequestOptions();
    optionsContainer.setContext(options);
    params.setOptions(optionsContainer);
    de.zib.gndms.stubs.CallMaintenanceActionResponse boxedResult = portType.callMaintenanceAction(params);
    return boxedResult.getResponse();
    }
  }

  public org.apache.axis.types.URI lookupORF(org.apache.axis.types.URI orfType,types.ContextT context) throws RemoteException, de.zib.gndms.stubs.types.UnknownORFType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"lookupORF");
    de.zib.gndms.stubs.LookupORFRequest params = new de.zib.gndms.stubs.LookupORFRequest();
    params.setOrfType(orfType);
    de.zib.gndms.stubs.LookupORFRequestContext contextContainer = new de.zib.gndms.stubs.LookupORFRequestContext();
    contextContainer.setContext(context);
    params.setContext(contextContainer);
    de.zib.gndms.stubs.LookupORFResponse boxedResult = portType.lookupORF(params);
    return boxedResult.getResponse();
    }
  }

  public void updateMappings() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateMappings");
    de.zib.gndms.stubs.UpdateMappingsRequest params = new de.zib.gndms.stubs.UpdateMappingsRequest();
    de.zib.gndms.stubs.UpdateMappingsResponse boxedResult = portType.updateMappings(params);
    }
  }

}
