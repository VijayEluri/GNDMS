<project name="c3grid" default="help" basedir="." >
	
	
	<!-- Define the environment variable -->
	<property environment="env"/>
	
	<!-- Jars -->
	<property name="tools-lib.dir" value="extra/tools-lib" />
	<property name="build-lib.dir" value="extra/build-lib" />
	<property name="lib.dir" value="extra/lib" />
	
	
	
	<!-- Source-Code directories of each package-->
	<property name="model.dir" value="model"/>
	<property name="kit.dir" value="kit"/>
	<property name="logic.dir" value="logic"/>
	<property name="infra.dir" value="infra"/>
	<property name="typecon.dir" value="typecon"/>
		
	<!-- Directories of Build-files  -->
	<property name="model.dest" value="${model.dir}/gndms-shared-model"/>
	<property name="kit.dest" value="${kit.dir}/gndms-kit"/>
	<property name="logic.dest" value="${logic.dir}/gndms-logic"/>
	<property name="infra.dest" value="${infra.dir}/gndms-infra"/>
	<property name="typecon.dest" value="${typecon.dir}/gndms-typecon"/>
	

	<!-- To avoid problems import just the following libaries -->
	<fileset dir="${env.GLOBUS_LOCATION}/lib" id="globus.lib">
		<OR>
		<filename name="addressing-1.0.jar"/>
		<filename name="axis.jar"/>
		<filename name="axis-url.jar"/>
		<filename name="backport-util-concurrent.jar"/>
		<filename name="bootstrap.jar"/>
		<filename name="cog-axis.jar"/>
		<filename name="cog-jglobus.jar"/>
		<filename name="cog-tomcat.jar"/>
		<filename name="cog-url.jar"/>
		<filename name="commonj.jar"/>
		<filename name="commons-beanutils.jar"/>
		<filename name="commons-cli-2.0.jar"/>
		<filename name="commons-collections-3.2.jar"/>
		<filename name="commons-dbcp.jar"/>
		<filename name="commons-digester.jar"/>
		<filename name="commons-discovery.jar"/>
		<filename name="commons-logging.jar"/>
		<filename name="commons-pool.jar"/>
		<filename name="concurrent.jar"/>
		<filename name="cryptix32.jar"/>
		<filename name="cryptix-asn1.jar"/>
		<filename name="cryptix.jar"/>
		<filename name="globus_cas_client.jar"/>
		<filename name="globus_cas_common.jar"/>
		<filename name="globus_cas_service.jar"/>
		<filename name="globus_cas_unit_test.jar"/>
		<filename name="globus_cas_utils.jar"/>
		<filename name="globus_delegation_client.jar"/>
		<filename name="globus_delegation_service.jar"/>
		<filename name="globus_delegation_stubs.jar"/>
		<filename name="globus_delegation_test.jar"/>
		<filename name="globus_usage_core.jar"/>
		<filename name="globus_usage_packets_common.jar"/>
		<filename name="globus_wsrf_gram_service_auditing_unit_test.jar"/>
		<filename name="globus_wsrf_gram_service_java_test_throughput.jar"/>
		<filename name="globus_wsrf_gram_service_java_test_unit.jar"/>
		<filename name="globus_wsrf_gram_service_java_usage.jar"/>
		<filename name="globus_wsrf_mds_aggregator.jar"/>
		<filename name="globus_wsrf_mds_aggregator_stubs.jar"/>
		<filename name="globus_wsrf_mds_aggregator_test.jar"/>
		<filename name="globus_wsrf_mds_index_test.jar"/>
		<filename name="globus_wsrf_mds_trigger_test.jar"/>
		<filename name="globus_wsrf_rendezvous_service.jar"/>
		<filename name="globus_wsrf_rendezvous_stubs.jar"/>
		<filename name="globus_wsrf_replicator_client.jar"/>
		<filename name="globus_wsrf_replicator.jar"/>
		<filename name="globus_wsrf_replicator_stubs.jar"/>
		<filename name="globus_wsrf_rft_client.jar"/>
		<filename name="globus_wsrf_rft.jar"/>
		<filename name="globus_wsrf_rft_service_java_usage.jar"/>
		<filename name="globus_wsrf_rft_stubs.jar"/>
		<filename name="globus_wsrf_rft_test.jar"/>
		<filename name="globus_wsrf_servicegroup.jar"/>
		<filename name="globus_wsrf_servicegroup_stubs.jar"/>
		<filename name="globus_wsrf_tools_test.jar"/>
		<filename name="gram-client.jar"/>
		<filename name="gram-monitoring.jar"/>
		<filename name="gram-service.jar"/>
		<filename name="gram-stubs.jar"/>
		<filename name="gram-utils.jar"/>
		<filename name="jaxrpc.jar"/>
		<filename name="jce-jdk13-125.jar"/>
		<filename name="jgss.jar"/>
		<filename name="junit.jar"/>
		<filename name="log4j-1.2.15.jar"/>
		<filename name="naming-common.jar"/>
		<filename name="naming-factory.jar"/>
		<filename name="naming-java.jar"/>
		<filename name="naming-resources.jar"/>
		<filename name="opensaml.jar"/>
		<filename name="pg73jdbc2.jar"/>
		<filename name="puretls.jar"/>
		<filename name="resolver.jar"/>
		<filename name="saaj.jar"/>
		<filename name="servlet.jar"/>
		<filename name="webmds-0.1-dev.jar"/>
		<filename name="wsdl4j.jar"/>
		<filename name="wsrf_common.jar"/>
		<filename name="wsrf_core.jar"/>
		<filename name="wsrf_core_registry.jar"/>
		<filename name="wsrf_core_registry_stubs.jar"/>
		<filename name="wsrf_core_samples_authzService.jar"/>
		<filename name="wsrf_core_samples_authzService_stubs.jar"/>
		<filename name="wsrf_core_samples_counter.jar"/>
		<filename name="wsrf_core_samples_counter_stubs.jar"/>
		<filename name="wsrf_core_samples_mgmt.jar"/>
		<filename name="wsrf_core_samples_mgmt_stubs.jar"/>
		<filename name="wsrf_core_stubs.jar"/>
		<filename name="wsrf_mds_index.jar"/>
		<filename name="wsrf_mds_index_stubs.jar"/>
		<filename name="wsrf_mds_trigger.jar"/>
		<filename name="wsrf_mds_trigger_stubs.jar"/>
		<filename name="wsrf_mds_usefulrp.jar"/>
		<filename name="wsrf_mds_usefulrp_schema_stubs.jar"/>
		<filename name="wsrf_provider_jce.jar"/>
		<filename name="wsrf_test_interop.jar"/>
		<filename name="wsrf_test_interop_stubs.jar"/>
		<filename name="wsrf_test.jar"/>
		<filename name="wsrf_test_unit.jar"/>
		<filename name="wsrf_test_unit_stubs.jar"/>
		<filename name="wsrf_tools.jar"/>
		<filename name="wss4j.jar"/>
		<filename name="xalan.jar"/>
		<filename name="xercesImpl.jar"/>
		<filename name="xml-apis.jar"/>
		<filename name="xmlsec.jar"/>
	</OR>
	</fileset>
	
	<!-- using ant contrib for contidionals, looping , and runtarget -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${build-lib.dir}/ant-contrib-0.6.jar" />
		</classpath>
	</taskdef>
		
	<!-- Import deployment file of each package-->
	<import file="${model.dir}/build.xml"/>	
	<import file="${kit.dir}/build.xml"/>
	<import file="${logic.dir}/build.xml"/>
	<import file="${infra.dir}/build.xml"/>
	<import file="${typecon.dir}/build.xml"/>
	
	<path id="groovy.path">
		<fileset file="${tools-lib.dir}/gndms-groovy.jar"/>
	</path>
	
	<!-- using groovc as groovy compiler in ant-->
	<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="groovy.path" />
	
	
	<!-- Sets all necessary settings and builds the whole project -->
	<target name="compile" description="Sets all necessary settings and builds the whole project">
		<runtarget target="stubs.compile"/>
		<runtarget target="symlink"/>
		<runtarget target="compile.src"/>
		<runtarget target="services.compile"/>
	</target>
	
	<target name="clean.stubsServices">
		<exec executable="sh">
			<arg value="-c"/>
			<arg value="for i in services/* ; do ( cd $i &amp;&amp; ant preClean ) ; done"/>
		</exec>
		<delete includeemptydirs="true">
			<fileset dir="services" includes="**/build/"/>	
		</delete>
		<exec executable="sh">
			<arg value="-c"/>
			<arg value="for i in services/* ; do ( cd $i &amp;&amp; ant postClean ) ; done"/>
		</exec>
	</target>
	
	<!-- Creates jar's for every service (class files will be created if not already done)-->
	<target name="compile.src" description="Creates jar files for every service, will be compiled if necessary">
		<runtarget target="model.jar"/>
		<runtarget target="model.enhancer"/>
		<runtarget target="kit.jar"/>
		<runtarget target="logic.jar"/>
		<runtarget target="typecon.jar"/>
		<runtarget target="infra.jar"/>
	</target>
	
	
	<!-- Delete build-files every service -->
	<target name="clean" description="deletes build-files of every service">
		<runtarget target="clean.stubsServices"/>
		<delete file=".symlink"/>
		<echo> Deleting binaries </echo>
		<runtarget target="infra.clean"/>
		<runtarget target="typecon.clean"/>
		<runtarget target="logic.clean"/>
		<runtarget target="kit.clean"/>
		<runtarget target="model.clean"/>
		<if>
			<not> 
				<isset property="cleanALL"/>
			</not>
			<then>
				<echo level="warning"> Note: Only class-files have been deleted! To delete also the generated jars type 'ant clean.all' </echo>
			</then>
		</if>
	</target>
	
	
	<!-- Delete generated jars-->
	<target name="clean.jar" description="deletes all generated jars">
		<runtarget target="infra.clean.jar"/>
		<runtarget target="typecon.clean.jar"/>
		<runtarget target="logic.clean.jar"/>
		<runtarget target="kit.clean.jar"/>
		<runtarget target="model.clean.jar"/>
		<delete file="extra/lib/GORFX.jar"/>
		<delete file="extra/lib/DSpace.jar"/>
	</target>
	<!-- Delete build-files and generated jar every package -->
	<target name="clean.all" description="deletes build-files and jars of every package">
		<property name="cleanALL" value="true"/>
		<runtarget target="clean.jar"/>
		<runtarget target="clean"/>
	</target>
	



	<!-- Creates jar-file of evey service's test-classes. Will be compiled if necessary -->
	<target name="compile.test" description="Creates jar-file of evey service's test-classes. Will be compiled if necessary">
		<runtarget target="model.test.jar"/>
		<runtarget target="kit.test.jar"/>
		<runtarget target="logic.test.jar"/>
		<runtarget target="typecon.test.jar"/>
		<runtarget target="infra.test.jar"/>
	</target>
	
	<!-- Building stubs for every service -->
	<target name='stubs.compile'>
		<exec executable="sh">
			<arg value="-c"/>
			<arg value="for i in services/* ; do ( cd $i &amp;&amp; ant compileStubs ) ; done"/>
		</exec>
	</target>
	
	<!-- class-files needed to compile DSpace -->
	<path id="dspace.path">
		<pathelement location="${tools-lib.dir}/gndms-groovy.jar"/> 
		<pathelement location="${tools-lib.dir}/annotations.jar"/>
		<dirset dir="services/DSpace/build/stubs-DSpace/classes/" />
		<pathelement location="${lib.dir}/gndms-infra.jar"/>
		<pathelement location="${lib.dir}/gndms-logic.jar"/>
		<pathelement location="${lib.dir}/gndms-shared-model.jar"/>
		<pathelement location="${tools-lib.dir}/joda-time-1.5.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-advertisement-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-core-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-Introduce-serviceTools-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-metadata-security-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-ServiceSecurityProvider-client-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-ServiceSecurityProvider-common-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-ServiceSecurityProvider-service-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/caGrid-ServiceSecurityProvider-stubs-1.2.jar"/> 
		<pathelement location="services/DSpace/lib/castor-0.9.9.jar"/>
		<pathelement location="services/DSpace/lib/jdom-1.0.jar"/>
		<pathelement location="${tools-lib.dir}/geronimo-jpa_3.0_spec-1.0.jar"/>
		<pathelement location="${tools-lib.dir}/geronimo-jta_1.1_spec-1.1.jar"/>
		<pathelement location="${tools-lib.dir}/serp-1.13.1.jar"/>
		<pathelement location="${tools-lib.dir}/openjpa-1.1.0.jar"/>

		<fileset refid="globus.lib"/>
	</path>
	
	<!-- class-files needed to compile GORFX -->
	<path id="gorfx.path">
		<pathelement location="${tools-lib.dir}/gndms-groovy.jar"/> 
		<pathelement location="${tools-lib.dir}/annotations.jar"/>
		<dirset dir="services/GORFX/build/stubs-GORFX/classes/" />
		<pathelement location="${lib.dir}/gndms-typecon.jar"/>
		<pathelement location="${lib.dir}/gndms-infra.jar"/>
		<pathelement location="${lib.dir}/gndms-logic.jar"/>
		<pathelement location="${lib.dir}/gndms-kit.jar"/>
		<pathelement location="${lib.dir}/gndms-shared-model.jar"/>
		<pathelement location="${tools-lib.dir}/joda-time-1.5.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-advertisement-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-core-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-Introduce-serviceTools-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-metadata-security-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-ServiceSecurityProvider-client-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-ServiceSecurityProvider-common-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-ServiceSecurityProvider-service-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/caGrid-ServiceSecurityProvider-stubs-1.2.jar"/> 
		<pathelement location="services/GORFX/lib/castor-0.9.9.jar"/>
		<pathelement location="services/GORFX/lib/jdom-1.0.jar"/>
		<pathelement location="${tools-lib.dir}/geronimo-jpa_3.0_spec-1.0.jar"/>
		<pathelement location="${tools-lib.dir}/geronimo-jta_1.1_spec-1.1.jar"/>
		<pathelement location="${tools-lib.dir}/serp-1.13.1.jar"/>
		<pathelement location="${tools-lib.dir}/openjpa-1.1.0.jar"/>
		<fileset refid="globus.lib"/>
		<pathelement location="${lib.dir}/DSpace.jar"/>
		<pathelement location="${tools-lib.dir}/args4j-2.0.9.jar"/>
		<dirset dir="services/DSpace/build/stubs-DSpace/classes/" />
		<pathelement location="${tools-lib.dir}/activation.jar	"/> 
		<pathelement location="${tools-lib.dir}/jaxb-api.jar"/>
		<pathelement location="${tools-lib.dir}/jaxb1-impl.jar"/>  
		<pathelement location="${tools-lib.dir}/jaxb-impl.jar"/> 
		<pathelement location="${tools-lib.dir}/jaxb-xjc.jar"/>
		<pathelement location="${tools-lib.dir}/jsr173_1.0_api.jar"/>
		<pathelement location="${tools-lib.dir}/google-collect-snapshot-20080820.jar"/>
		
		
		
		
	</path>
	<!-- Building all services -->
	<target name='services.compile'>
		<mkdir dir="tmp"/>
		<javac srcdir='services/DSpace/src' destdir='tmp' classpathref="dspace.path"/>
		<jar destfile="${lib.dir}/DSpace.jar"
		     basedir="tmp">
		</jar>
		<delete dir="tmp"/>
		<mkdir dir="tmp"/>
		<javac srcdir='services/GORFX/src' destdir='tmp' classpathref="gorfx.path"/>
		<jar destfile="${lib.dir}/GORFX.jar"
		     basedir="tmp">
		</jar>
		<delete dir="tmp"/>
		<exec executable="sh">
			<arg value="-c"/>
			<arg value="for i in services/* ; do ( cd $i &amp;&amp; ant createDeploymentGar ) ; done"/>
		</exec>
	</target>
	
	
	<!-- Checks if symlink has been executed before -->
	<target name="symlink.check">
		<available property="linked" file=".symlink"/>
	</target>
	
	<!-- Create necessary symlinks in the services' lib directories -->
	<target name="symlink" depends="symlink.check" unless="linked" description="sets symbolic links, if needed">
		<echo> setting symbolic links </echo>
		<exec executable="sh">
			<arg value="sync.sh"/>
		</exec>
		<echo file=".symlink">dummy-file, needed for build-script </echo>
		
	</target>
	

	<target name="help" description="Prints usage information.">
		<echo message=" =================================================================================" />
		<echo message="|                      C3Grid Deployment                                          |" />
		<echo message="|                                                                                 |" />
		<echo message=" ---------------------------------------------------------------------------------" />
		<echo message="|  USAGE:                                                                         |" />
		<echo message="|    Type 'ant -h' for general help with Ant	                                     |" />
		<echo message="|    Type 'ant -p' for a description of available build targets.                  |" />
		<echo message="|    Type 'ant clean' for deleting all generated class-files.                     |" />
		<echo message="|    Type 'ant clean.all' for deleting all generated class-files and jars         |" />
		<echo message="|    Type 'ant compile' to compile all class-files of c3grid and create the jars	 |" />
		<echo message="|    Type 'ant compile.test' to compile all test-class-files and create the jars	 |" />
		<echo message=" =================================================================================" />
	</target>
	
	
</project>
