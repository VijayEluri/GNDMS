<project name="logic compilation file" default="help" basedir=".">
	
	<!-- Define the environment variable -->
	<property environment="env"/>
	
	<!-- Do always load properties in the following order: ${gndms.basedir},${gndms.properties},${gndms.deps},${others.properties} -->
	
	<!--Define location of gndms basedir relative to this service-->
	<property name="gndms.basedir"  value=".."/>
	
	<!-- Loading global project-settings.-->
	<property file="${gndms.basedir}/gndms.properties"/>
	
	<!-- Loading global project-dependencies -->
	<property file="${gndms.basedir}/gndms.deps"/>
	
	<!-- Loading local project-properties-->
	<property file="logic.properties"/>
	
	<!-- path needed to compile logic-->
	<path id="logic.path">
		
		<pathelement path="${GROOVY}"/> 
		<pathelement path="${annotations}"/>
		<dirset dir="${logic.classes.dest}"/>
       		<pathelement path="${stuff}"/>                
		<pathelement path="${gndms-shared-model}"/>
		<pathelement path="${testng}"/> 
		<pathelement path="${apache-commons}"/>
		<pathelement path="${db-derby}"/>
		<pathelement path="${joda-time}"/> 
		<pathelement path="${gndms-kit}"/>
		<pathelement path="${collections}"/>
		<pathelement path="${gt4}"/>
		<pathelement path="${openjpa}"/>
        	<pathelement path="${guice}"/>
	</path>
	
	<!-- using ant contrib for contidionals, looping , and runtarget -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${ant.contrib}" />
		</classpath>
	</taskdef>
	
	
	<!-- Compile logic, but not its test-files -->	
	<target name="compile" description="Compiles logic">
		<echo>Compiling logic's class-files</echo>
		<mkdir dir="${logic.classes.dest}"/>
		<for param="jars">
			<path refid="logic.path"/>
			<sequential>
				<if>
					<not>
						<available file="@{jars}"/>			
					</not>
					<then>
						<fail message="Not able to compile as '@{jars}' was not found."/>
					</then>
				</if>
				
			</sequential>
		</for>
		<!-- Copy Meta files to build dir-->
		<copy todir="${logic.classes.dest}">
			<fileset dir='src'>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<javac srcdir='src' destdir='${logic.classes.dest}' classpathref="logic.path" debug="${javac.debug}"/>
			
	</target>
	
	
	<!-- Creates jar containing logic's test-classfiles-->	
	<target name="jar.test"  depends="compile.test" description="Creates jar file gndms-logic-test.jar in 'extra/lib'">	
		<echo>Generating gmds-logic-test.jar</echo>
		<jar destfile="${gndms-logic-test}"
		     basedir="${logic.test.classes.dest}">
		</jar>
	</target>
	
	<!-- Creates jar containing logic's classfiles-->	
	<target name="jar" depends="compile" description="Creates jar file gndms-logic.jar in 'extra/lib'">	
		<echo>Generating gndms-logic.jar</echo>
		<jar destfile="${gndms-logic}"
		     basedir="${logic.classes.dest}">
		</jar>
	</target>
	
	
	<!-- path needed to compile logic's testfiles-->
	<path id="logic.test.path">
		<pathelement path="${gndms-shared-model-test}"/>
		<pathelement path="${gndms-kit-test}"/>
		<pathelement path="${gndms-logic}"/>
		<path refid="logic.path"/>
		<!-- Dirset nötig ?-->
		<dirset dir="${logic.test.classes.dest}"/>
	</path>
	
	<!-- Compile logic's test-classes-->	
	<target name="compile.test" description="Compiles logic's test-files">
		<echo>Compiling kit's test-classes</echo>
		<mkdir dir="${logic.test.classes.dest}"/>
		<for param="jars">
			<path refid="logic.test.path"/>
			<sequential>
				<if>
					<not>
						<available file="@{jars}"/>			
					</not>
					<then>
						<fail message="Not able to compile as '@{jars}' was not found."/>
					</then>
				</if>
				
			</sequential>
		</for>
		<!-- Split nötig ?-->
		<javac srcdir='test-src' destdir='${logic.test.classes.dest}' classpathref="logic.test.path" includes="**/action/*" debug="${javac.debug}">	
		</javac>
		
		<javac srcdir='test-src' destdir='${logic.test.classes.dest}' classpathref="logic.test.path" includes="**/model/*" debug="${javac.debug}">	
		</javac>
		<!-- Copy Meta files to build dir-->
		<copy todir="${logic.test.classes.dest}">
			<fileset dir='test-src'>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<!-- Deletes binaries and jar-files -->
	<target name="clean" description="Deletes logic's binaries">
		<echo>Deleting logic's class-files</echo>
		<delete dir='${logic.classes}'/>
	</target>
	
	<!-- Deletes jar-files -->
	<target name="clean.jar" description="Deletes logic's jar-file">
		<echo>Deleting all generated jars belonging to logic</echo>
		<delete file='${gndms-logic}'/>
		<delete file='${gndms-logic-test}'/>
	</target>
	
	<target name="help" description="Prints usage information.">
		<echo message=" =================================================================================" />
		<echo message="|                      LOGIC Compilation                                          |" />
		<echo message="|                                                                                 |" />
		<echo message=" ---------------------------------------------------------------------------------" />
		<echo message="|  USAGE:                                                                         |" />
		<echo message="|    Type 'ant -h' for general help with Ant	                                     |" />
		<echo message="|    Type 'ant -p' for a description of available build targets.                  |" />
		<echo message="|    Type 'ant clean' for deleting all generated class-files.                     |" />
		<echo message="|    Type 'ant clean.all' for deleting all generated class-files and jars         |" />
		<echo message="|    Type 'ant compile' to compile all class-files of logic                       |" />
		<echo message="|    Type 'ant compile.test' to compile all test-class-files and create the jars	 |" />
		<echo message="|    Type 'ant jar' to  create the jars	                                         |" />
		<echo message=" =================================================================================" />
	</target>
</project>
	
