require "#{ENV['GNDMS_SOURCE']}/buildr/gndms_modules"
include GNDMS_MODULES

PLUGIN_VERSION_NUMBER = '0.6.3'
# Don't touch below unless you know what you are doing
# --------------------------------------------------------------------------------------------------


setupGNDMSModules()
setupModules( "../staging", "staging" )

desc 'Plug-in for the DMSStaging (staging proxy) task-flow'
define 'dmsstaging' do
    project.version = PLUGIN_VERSION_NUMBER
    manifest['Copyright'] = MF_COPYRIGHT
    manifest['License'] = MF_LICENSE
    compile.options.source = SOURCE
    compile.options.target = TARGET


    desc 'The client side of the plugin'
    define 'client', :layout => dmsLayout('client', 'dmsStaging-client') do
      compile.with COMMONS_CODEC, COMMONS_LOGGING, GNDMS_STUFF, GNDMS_COMMON, GNDMS_GNDMC_REST, STAGING_CLIENT, JETBRAINS_ANNOTATIONS, JODA_TIME, ARGS4J, INJECT, GT4_SERVLET, COMMONS_LANG, SLF4J, JSON, SPRING_CLIENT, XSTREAM, XSTREAM_DEPS
      compile
      package :jar

        desc 'Runs the DMS Staging test client'
        task 'run' do |t|
            jars = compile.dependencies.map(&:to_s)
            jars << compile.target.to_s
            args = [ '-uri', 'http://localhost:8080/gndms/c3grid/' ] 
            props = {}
            runner = 'de.zib.gndms.taskflows.dmsstaging.client.tools.DmsStageInExample'
            runJava( t.to_s, runner, args, jars, props )
        end
    end


    desc 'The server side of the plugin'
    define 'server', :layout => dmsLayout('server', 'dmsStaging-server') do
        compile.with project('client'), GNDMS_COMMON, GNDMS_KIT, GNDMS_LOGIC, GNDMS_INFRA, GNDMS_MODEL, GNDMS_NEOMODEL, GNDMS_INFRA, GNDMS_VOLDMODEL, GNDMS_GNDMC_REST, GNDMS_STUFF, STAGING_CLIENT, INJECT, OPENJPA, JETBRAINS_ANNOTATIONS, SLF4J, SPRING

        compile
        meta_inf << file( _( 'src/META-INF/services' ) )
        package :jar

        desc 'deploys the DMSStaging server jar'
        task 'deploy' do
            deploy_target = "#{ENV['JETTY_HOME']}/gndms"
            cp project('dmsstaging:server').package(:jar).to_s, deploy_target
            cp project('dmsstaging:client').package(:jar).to_s, deploy_target
        end
    end
end
