require "#{ENV['GNDMS_REST']}/buildr/gndms_modules"
include GNDMS_MODULES

PLUGIN_VERSION_NUMBER = '0.6.0-pre'
# Don't touch below unless you know what you are doing
# --------------------------------------------------------------------------------------------------


setupGNDMSModules()

desc 'Plug-in for the fileTransfer task-flow'
define 'transfer' do
    project.version = PLUGIN_VERSION_NUMBER
    manifest['Copyright'] = MF_COPYRIGHT
    manifest['License'] = MF_LICENSE
    compile.options.source = SOURCE
    compile.options.target = TARGET


    desc 'The client side of the plugin'
    define 'client', :layout => dmsLayout('client', 'fileTransfer-client') do
      compile.with GOOGLE_COLLECTIONS, COMMONS_FILEUPLOAD, COMMONS_CODEC, COMMONS_LOGGING, GNDMS_STUFF, GNDMS_COMMON, GNDMS_GNDMC_REST, JETBRAINS_ANNOTATIONS, JODA_TIME, ARGS4J, INJECT, GUICE, GT4_SERVLET, COMMONS_LANG, OPENJPA, SLF4J, JSON, SPRING, XSTREAM, XSTREAM_DEPS
      compile
      package( :jar ).include _("src/log4j.properties"), :path => "."  
      package :jar

        desc 'Runs the dummy test client'
        task 'run' do |t|
            jars = compile.dependencies.map(&:to_s)
            jars << compile.target.to_s
            args = [ '-uri', 'http://localhost:8080/c3grid/', '-dn', 'foo' ] 
            props = {}
            runner = 'de.zib.gndms.taskflows.filetransfer.client.FileTransferExample'
            runJava( t.to_s, runner, args, jars, props )
        end
    end


    desc 'The server side of the plugin'
    define 'server', :layout => dmsLayout('server', 'fileTransfer-server') do
        compile.with project('client'), GOOGLE_COLLECTIONS, COMMONS_FILEUPLOAD, COMMONS_CODEC, GNDMS_COMMON, GNDMS_STUFF, GNDMS_MODEL, GNDMS_NEOMODEL, GNDMS_KIT, GNDMS_LOGIC, GNDMS_INFRA, JETBRAINS_ANNOTATIONS, GT4_LOG, GT4_COG, GT4_SEC, GT4_XML, JODA_TIME, ARGS4J, INJECT, GUICE, GT4_SERVLET, COMMONS_LANG, OPENJPA, SLF4J, JSON, SPRING

        compile
        meta_inf << file( _( 'src/META-INF/services' ) )
        package :jar

        desc 'deploys the transfer server jar'
        task 'deploy' do
            deploy_target = "#{ENV['JETTY_HOME']}/webapps/root/WEB-INF/lib"
            cp package(:jar).to_s, deploy_target
            cp project('client').package(:jar), deploy_target
        end
    end
end
